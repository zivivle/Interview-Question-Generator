export const questions = {
  // CS: [
  //   "브라우저 동작 원리",
  //   "DNS란?",
  //   "box model 이란?",
  //   "svg, Canvas 란?",
  //   "webworker란?",
  //   "websocket이란?",
  //   "CSR과 SSR의 차이",
  //   "쿠키, 세션, 로컬스토리지의 차이",
  //   "웹팩(Webpack)",
  //   "바벨이란?",
  //   "바벨이 필요한 이유?",
  //   "바벨은 모든 최신 기능을 변환해주나요?",
  //   "바벨과 폴리필의 차이점",
  //   "바벨을 사용하면서 폴리필을 함께 사용하는 이유",
  //   "자료구조(Data Structure)",
  //   "웹 표준을 지키며 개발하시나요?",
  //   "SPA와 MPA에 대해 설명해주세요",
  //   "[리액트] 에러바운더리와 서스펜스에 대해서 말씀해주세요.",
  //   "로그인 처리를 할 때 쿠키와 세션을 어떻게 사용하시나요?",
  //   "프로세스와 스레드의 차이점",
  //   "번들 사이즈를 줄이려면 어떻게 해야 하나요?",
  //   "멀티스레딩의 장단점",
  //   "객체 지향 프로그래밍이란 무엇인가요?",
  //   "네트워크에서 TCP와 UDP의 차이점과 사용되는 상황",
  //   "CORS는 무엇이고 해결 방법",
  //   "자료구조 스택과 큐에 대해서 설명해주세요",
  //   "HTTP 메소드 종류와 GET과 POST의 차이",
  //   "HTTP와 HTTPS의 차이점을 말해주세요.",
  //   "RESTFUL API란?",
  //   "주소창에 www.google.com 을 입력하면 생기는 일을 설명해주세요.",
  //   "웹 프로토콜이란?",
  //   "JWT란?",
  //   "MVC와 MVVM 패턴의 차이를 설명해주세요.",
  //   // "OOP (Object Oriented Programming)란 무엇인가요?",
  //   "Git을 사용해보셨나요? Git에 대해 아는 것을 말해보세요.",
  //   "깊은복사와 얕은복사의 차이점을 말해주세요.",
  //   "크로스 브라우징이란?",
  //   "크로스 브라우징 경험이 있으신가요?",
  //   "웹 소켓을 사용해 보셨나요?",
  //   "웹사이트 성능 최적화에는 어떤 방법이 있나요?",
  //   "Sementic HTML란 무엇인가요?",
  //   "라이브러리와 프레임워크에 대해 설명해주세요.",
  //   "디자인 패턴",
  //   "TCP 와 HTTP",
  //   "keep-alive 란",
  //   "V8 엔진과 Chromium",
  //   "Gzip",
  //   "웹서버와 WAS 차이점",
  //   "프론트엔드의 보안이슈",
  //   "AMP란?",
  //   "XSS 공격이란 무엇이며, 프론트엔드에서 이를 방어하기 위한 방법을 설명해주세요.",
  //   "Progressive Partial Rendering(PPR)에 대해서 설명해주세요.",
  //   "멀티 프로세스와 멀티 스레드에 대해 설명해주세요.",
  //   "HTTP/2의 특징에 대해 설명해주세요.",
  //   "Node.js의 주요 특징에 대해 설명해주세요.",
  //   "stale-while-revalidate에 대해 설명해주세요.",
  //   "HTTP의 ETag에 대해서 설명해주세요.",
  //   "관계형 데이터베이스와 비관계형 데이터베이스에 대해 설명해주세요.",
  //   "커링(currying)이란 무엇인지 설명하고, 활용 예시를 들어줄 수 있나요?",
  //   "JSON Schema에 대해 설명해주세요.",
  //   "TCP 3-way handshake 과정에 대해서 설명해주세요.",
  //   "OSI 7계층에 대해서 설명해주세요.",
  //   "dependency, devDependency, peerDependency에 대해서 설명해주세요.",
  //   "브라우저가 폰트를 적용하는 과정을 설명해주세요.",
  //   "<a> 태그를 이용해 외부 페이지를 열 때 보안상 고려해야 할 점은 무엇인가요?",
  //   "JWT(Json Web Token)의 장점은 무엇인가요?",
  //   "CSS 전처리기(CSS preprocessor)란 무엇인가요?",
  //   "Core Web Vitals란 무엇인가요?",
  //   "동적 타입 언어와 정적 타입 언어에 대해 설명해주세요.",
  //   "TDD란 무엇인지 설명해주세요.",
  //   "npm install과 npm ci의 차이점에 대해 설명해주세요.",
  // ],
  // Typescript: [
  //   "타입스크립트를 사용하는 이유는?",
  //   "기본 타입/ 함수 타입",
  //   "Type Alias에 대해서 설명해주세요",
  //   "Interface, Class 사용과 확장",
  //   "tsconfig와 옵션에 대해서 아는대로 설명해주세요.",
  //   "자신만의 TypeScript 초기세팅 방법이 있나요? 있다면 설명해주세요.",
  //   "제네릭타입에 대해서 설명해주세요.",
  //   "타입 가드에 대해서 설명해주세요.",
  //   "타입 단언과 타입 호환에 대해서 설명해주세요.",
  //   "export/import type을 해줘야하는 이유가 뭘까요?",
  //   "sourceMap을 통한 디버깅 경험이 있으신가요?",
  //   "타입 애너테이션에 대해서 설명해주세요",
  //   "타입스크립트 satisfies 키워드에 대해 설명해주세요.",
  //   "타입스크립트의 infer 키워드에 대해서 설명해주세요.",
  // ],
  // "HTML/CSS": [
  //   "HTML 렌더링 도중 JavaScript가 실행되면 렌더링이 멈추는 이유",
  //   "CSS 선택자 우선순위",
  //   "Attribute와 Property의 차이",
  //   "UI.UX",
  //   "반응형 웹의 3요소",
  //   "Cascading에 관해서 설명해주세요.",
  //   "CSS 애니메이션과 JS 애니메이션의 차이에 대해 설명해주세요",
  //   "Flexbox를 사용해보셨나요?",
  //   "Flex와 Grid 차이",
  //   "버블링과 캡쳐링",
  //   "event.target과 event.current.target의 차이",
  // ],
  // JS: [
  //   "콜백함수란",
  //   "Promise와 Async/Await의 차이점",
  //   "비동기 로직 동작원리",
  //   "var, let, const의 차이점을 말해주세요.",
  //   "forEach와 map 차이",
  //   "호이스팅에 대해 설명해주세요.",
  //   "이벤트 루프가 무엇인가요?",
  //   "Promise와 콜백의 차이를 설명해주세요",
  //   "마이크로태스크 큐와 태스크 큐의 차이점을 아시나요?",
  //   "micro task queue 동작 과정",
  //   "함수 선언식과 함수 표현식의 차이를 설명해주세요",
  //   "클로저와 스코프에 대해 설명해주세요.",
  //   "Promise와 setTimeout 우선 순위에 대해 말해주세요.",
  //   `이벤트 버블링과 캡처링이란 무엇인가요?\n이벤트 버블링과 캡처링에 대한 예시를 들어주세요`,
  //   "렉시컬 환경에 대해 설명해주세요.",
  //   "event.target과 event.currentTarget의 차이점을 말해주세요.",
  //   "클로저가 무엇인가요?",
  //   "자바스크립트의 원시타입과 참조타입에 대해 설명해주세요.",
  //   "this에 대해 아는대로 설명해보세요.",
  //   "ES6 문법 아는 것이 있다면 말해주세요.",
  //   "Sass/Scss/css-in-js를 사용해보셨나요? (혹은 차이점을 말해주세요)",
  //   "AJAX란?",
  //   "데이터 타입에 대해 설명해주세요",
  //   "자바스크립트에서 일어나는 데이터 형 변환에 대해서 설명해주세요",
  //   "자바스크립트가 유동적인 언어인 이유는 무엇인가요?",
  //   "프로토타입에 대해서 설명해주세요",
  //   "불변성을 유지하려면 어떻게 해야하나요?",
  //   "requestAnimationFrame을 사용해본 적이 있나요?",
  //   "HTML이 렌더링 중에 자바스크립트가 실행되면 렌더링이 멈추는 이유를 설명해주세요.",
  //   "package.json에서 dependencies와 devDependencies의 차이점을 말해주세요.",
  //   "타입스크립트를 써보신 경험이 있나요? 타입스트립트에 대해서 어떻게 생각하시나요?",
  //   "call( ), apply( ), bind( )의 차이점을 말해주세요.",
  //   "화살표 함수와 일반함수의 차이를 설명해보세요.",
  //   "실행 컨텍스트가 무엇인가요?",
  //   "Webpack이란?",
  //   "호이스팅과 TDZ",
  //   "script태그가 body 위 / 아래에 있을 때의 차이, async load(async defer)",
  //   "position relative vs absolute 속도 비교",
  //   "JS의 프로토타입",
  //   "함수표현식과 함수선언식 차이",
  //   "JS layout, paint 과정 없앨 수 있는 기법들",
  //   "JS의 메모리 관리",
  //   "자바스크립트에서 생성자 함수가 무엇인지, class 문법은 왜 도입되었는지 설명해주세요.",
  //   "자바스크립트의 메모리 관리에 대해서 아는대로 설명해주세요.",
  //   "자바스크립트에서 메모리 누수가 발생하는 상황들을 설명해주세요.",
  //   "자바스크립트에서 '0.1 + 0.2 === 0.3'의 실행 결과에 대해 설명해주세요.",
  //   "css 속성 dvh, svh, lvh 란 무엇인가요?",
  //   "requestAnimationFrame에 대해서 설명해주세요.",
  //   "css box-sizing 속성에 대해 설명해주세요.",
  //   "BFF(Backend For Frontend)란 무엇인가요?",
  //   "트리 쉐이킹에 대해 설명해주세요.",
  // ],
  // React: [
  //   "React에 대해 아는대로 말씀해주세요. (원리, 특징, 장단점)",
  //   "Virtual DOM이란? Virtual DOM을 사용하는 이유는 무엇인가요?",
  //   "props와 state에 대해 설명해주세요.",
  //   "props와 state의 차이점",
  //   "React Hook이 무엇인가요?",
  //   "제어 컴포넌트와 비제어 컴포넌트의 차이에 대해 설명해주세요.",
  //   "JSX란?",
  //   "React 라이프사이클에 대해서 설명해주세요.",
  //   "Key Props 사용 이유에 대해서 말해주세요.",
  //   "pure component에 대해서 설명해주세요",
  //   "shouldComponentUpdate에 대해 설명해주세요.",
  //   "클래스형 컴포넌트와 함수형 컴포넌트의 차이에 대해 설명해주세요.",
  //   "생명 주기 메서드에 대해서 설명해주세요",
  //   "왜 state를 직접 바꾸지 않고 useState를 사용해야하나요?",
  //   "리액트에서 메모이제이션을 어떤 방식으로 하나요?",
  //   "React-Query에 대해서 알고있나요?",
  //   "React-Query를 사용해본 경험이 있다면 말씀해주세요",
  //   "React npm 패키지중 가장 좋아하는 패키지가 있을까요?",
  //   "리액트 렌더링 성능 향상을 위해 어떻게 해야하나요?",
  //   "useMemo와 useCallback의 차이점을 말해주세요.",
  //   "원시값과 참조값(array, object)의 차이점(메모리 관점에서)",
  //   "본인이 생각하는 좋은 컴포넌트란",
  //   "Class와 Hooks의 차이를 아시나요?",
  //   "setState는 동기? 비동기? setState가 적용되는 과정 설명",
  //   "React 18버전 업데이트 내용에 대해서 말씀해주세요",
  //   "useEffect와 useLayoutEffect의 차이점에 대해 말씀해주세요",
  //   "Context API에 대해 설명해주세요",
  //   "전역상태관리 툴을 사용해보신 경험이 있나요? 있다면 말씀해주세요.",
  //   "코드 스플리팅, preloading",
  //   "React 18 변경점",
  //   "css-in-js에 대해서",
  //   "React에서 SSR 구현",
  //   "require VS import",
  //   "Redux 와 Flux 패턴",
  //   "클라이언트 단에서 응답을 더 빨리 받는 방법",
  //   "BFF란?",
  //   "클라이언트 사이드 라우팅이 동작하는 과정에 대해 설명해주세요.",
  //   "최신 버전의 Next.js가 제공하는 캐싱 기능들에 대해 설명해주세요.",
  //   "Server Action이란 무엇인가요?",
  //   "리액트에서 변수 관리 시 useRef를 사용하는 것은 let을 사용하는 것과 어떤 차이가 있나요?",
  //   "왜 useState를 조건문 안에서 사용하면 안 되나요?",
  // ],
  // 프로젝트: [
  //   "프로젝트에서 협업은 어떤 식으로 진행했는가?",
  //   "협업에서 기억에 가장 남는 상황",
  //   "포트폴리오의 프로젝트와 담당하신 파트",
  //   "프로젝트에서 기술적으로 어려웠던 점과 해결 방법",
  //   "리팩토링을 할 기회가 있다면 프로젝트에서 어떤 부분을 개선하고 싶은가",
  //   "프론트엔드와 백엔드 간의 커뮤니케이션 방법과 필요한 데이터에 대해 어떻게 협의하였나",
  //   "갈등이 생긴 경험과 해결했는지",
  //   "프로젝트에서 가장 힘들었던 경험",
  //   "전역 상태 관리 라이브러리는 왜 사용하나요?",
  //   "Storybook에 대해서 설명해주세요.",
  //   "Tanstack Query를 사용하는 이유를 설명해 주세요.",
  //   "FSD(Feature-Sliced Design) 아키텍처를 적용한 이유와 장단점에 대해 설명해주세요.",
  //   "프로젝트에서 성능 최적화를 위해 어떤 작업들을 진행했나요?",
  //   "Next.js의 SSR과 CSR을 어떤 기준으로 선택하여 적용했나요?",
  //   "프로젝트에서 에러 핸들링은 어떻게 구현했나요?",
  //   "디자인 시스템을 구축한 경험이 있다면, 어떤 방식으로 진행했나요?",
  //   "프로젝트에서 웹폰트 최적화는 어떻게 진행했나요?",
  //   "Dynamic Import를 사용한 이유와 실제 적용 사례를 설명해주세요.",
  //   "프로젝트에서 상태 관리 라이브러리 선택 시 고려했던 점들은 무엇인가요?",
  //   "프로젝트에서 TypeScript를 도입한 이유와 실제 적용 시 얻은 이점은 무엇인가요?",
  //   "프로젝트에서 Tailwind CSS를 선택한 이유와 장단점은 무엇인가요?",
  //   "프로젝트에서 적용한 폴더 구조의 장점과 단점은 무엇인가요?",
  // ],
  // 기본질문: [
  //   "왜 개발자가 되고 싶은가?",
  //   "프로그래밍이란 뭐라고 생각하나요?",
  //   "최근 공부해보고 싶은 기술이 있다면 무엇이 있을까요?",
  //   "최신 기술 트렌드 추적 방법",
  //   "개발은 평생 공부해야하는 분야인데 어떤 식으로 학습을 하고 있나요? 본인만의 학습법이 있다면?",
  //   "본인의 장단점",
  //   "스트레스 관리는 어떻게 하시나요?",
  //   "기억에 남는 에러",
  //   "가장 최근에 디버깅에 성공한 얘기",
  //   "개발자로서 목표가 무엇인가요? 혹은 본인의 인생의 목표가 무엇인가요?",
  //   "프론트엔드는 기술이 빠르게 변화하는 데 두려워하진 않나요?",
  //   "프로젝트를 진행하면서 어려웠던 점과 어떻게 극복했는지 말해주세요.",
  //   "개발을 공부하면서 가장 힘들었던 경험",
  //   "마지막으로 회사에 궁금한 점 혹은 하고 싶은 말",
  // ],
  이직면접준비질문: [
    "CSS 적용 우선순위",
    "opacity 변경시 렌더링 과정에서의 변화",
    "클로저란?",
    "CSRF, XXS 공격과 그에 대한 대처 방법에 대해서",
    "바벨과 폴리필",
    "번들러(웹팩, 롤업, Vite)에 대해서",
    "브라우저 렌더링 과정에 대해서",
    "웹 접근성이 중요한 이유와 웹 접근성 방법에 대해서",
    "Array를 직접 변경하는 경우와 새로운 Array를 반환하는 경우의 차이",
    "useEffect와 useLayoutEffect의 차이점에 대해서",
    "TCP UDP 차이점에 대해서",
    "CORS란? 어떻게 해결하나요?",
    "쿠키, 세션, 로컬스토리지의 차이",
    "프로세스 vs 스레드",

    "HTTP vs HTTPS",
    "RESTful API란?",
    "var, let, const 차이",
    "이벤트 루프, 마이크로태스크 vs 태스크",
    "this 바인딩 방식",
    "프로토타입이란?",
    "얕은 복사 vs 깊은 복사",
    "비동기 처리: Promise vs async/await",
    "호이스팅과 TDZ",
    "자바스크립트의 불변성",
    "함수 선언식 vs 표현식",
    "React의 원리와 Virtual DOM",
    "상태 관리 흐름: props vs state 차이",
    "React에서 왜 state를 직접 변경하면 안 되나요?",

    "렌더링 최적화 방법",
    "에러바운더리란?",
    "React Query를 사용한 이유",
    "box model 설명",
    "SSR vs CSR (Next.js 기준)",
    "useRef vs let 차이",
    "Zustand 전역 상태 관리 도구 도입 이유",
    "기억에 남는 프레임워크나 라이브러리가 있는지?",
    "최근 관심있게 보고있는 기술이 있는지?",
    //
    "stale-while-revalidate에 대해서 알고있나요?",
    //
    "* 간단하게 자기소개",
    "** 우리 회사에 지원한 이유",
    // 도메인에 대한 관심도를 어필하자!
    // 사용자 친화적인 UI, 게이미피케이션같은 기능들이 제가 SI 업체에서 개발하지 못했던 좋은 경험들이라고 생각되고 성장할 수 있는 기회라고 생각이 들어 지원하게되었습니다.
    "** 회사에 들어온다면 기여하고 싶은 것",
    // 저는 문서화를 정말 좋아합니다.
    // 사이드 프로젝트에서도 solved it이라는 문서 섹션을 만들어서 문제를 해결하는 과정을 문서화하고 공유하는 것을 좋아했고,
    // 회사에서도 제 별명이 문서왕이라고 불릴 정도로 문서화하는 것을 좋아합니다.
    // 저의 이런 장점을 적극적으로 활용해 팀원 분들께 도움이 되고 함께 성장할 수 있었으면 좋겠습니다. :)
    "** 마지막으로 하고싶은 이야기나 질문 있으실까요?",
    // 이렇게 힘든 시기에 면접을 볼수있는 기회를 주셔서 감사합니다!
    // 제가 너무 두서없이 구구절절 대답한 것 같은데 끝까지 들어주셔서 정말 감사합니다
    // 혹시 기회를 주신다면 회사에 헌신적으로 어떤 일이든 열심히 노력해보고 싶습니다!
    // 감사합니다!
    "*** 진짜 모르겠는 질문!",
    // 죄송합니다. 이 내용은 제가 아직 학습이 부족한 주제인 것 같습니다. 면접이 끝난 뒤 꼭 다시 찾아보고 학습하겠습니다.
    //
    // 1)
    // "~~~"에 대해서는 정확하게 알지 못하지만, "~~~~"에 관련된 것으로 보입니다.
    // 제가 이 "~~~~"과 비슷한 "~~~~~"에는 익숙한데, 정말 이것과 비슷한 개념인지 면접이 끝난 후 다시 학습이 필요할 것 같습니다.
    //
    // 2) 비슷한 주제에 대해서는 기억이 났으때
    // 완전히 같은 주제는 다뤄보지 않았지만, "~~~~"한 비슷한 주제에 대해서는 다뤄본 경험이 있습니다.
    //
    // 3) 정확히 알지 못하지만 예상되는 것
    // 이 주제에 대해 어느 정도 들어본 적은 있지만, 정확히 설명드릴 수 있을 정도는 아닌 것 같습니다. 제가 이해한 바로는 ~인데, 혹시 틀린 부분이 있다면 바로잡아 주시면 감사하겠습니다.
    //
    // 4) 정말 추측도 안될때
    // 죄송합니다. 이 내용은 제가 아직 학습이 부족한 주제인 것 같습니다. 면접이 끝난 뒤 꼭 다시 찾아보고 학습하겠습니다.
    //
    // 5) 알고 있는 내용이지만 기억이 나지 않을 때
    // 잘 기억이 나지 않아서 지금 당장 말씀드리기 힘들 것 같습니다.
  ],
};
